# -*- coding: utf-8 -*-
"""Lamport's Clock Simulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zp35hfWipIMKTj0KQvKiwtTBF0rAHFEr
"""

import queue

class LamportClock:
    def __init__(self, process_id):
        self.clock = 0
        self.process_id = process_id

    def increment(self):
        self.clock += 1
        return self.clock

    def update(self, received_timestamp):
        self.clock = max(self.clock, received_timestamp) + 1
        return self.clock

    def get_timestamp(self):
        return (self.clock, self.process_id)

class DistributedSystem:
    def __init__(self, process_count):
        self.processes = {f"P{i}": LamportClock(f"P{i}") for i in range(process_count)}
        self.message_queues = {f"P{i}": queue.Queue() for i in range(process_count)}

    def local_event(self, process_id):
        clock = self.processes[process_id].increment()
        print(f"Local event in {process_id}: {self.processes[process_id].get_timestamp()}")

    def send_message(self, sender_id, receiver_id):
        timestamp = self.processes[sender_id].get_timestamp()[0]
        self.message_queues[receiver_id].put(timestamp)
        print(f"Message sent from {sender_id} to {receiver_id} at time {timestamp}")

    def receive_message(self, receiver_id):
        if not self.message_queues[receiver_id].empty():
            received_timestamp = self.message_queues[receiver_id].get()
            updated_clock = self.processes[receiver_id].update(received_timestamp)
            print(f"Message received by {receiver_id}: Updated clock = {updated_clock}")
        else:
            print(f"No messages for {receiver_id}.")

    def display_clocks(self):
        for process_id, clock in self.processes.items():
            print(f"{process_id}: {clock.get_timestamp()}")

def main():
    print("Welcome to the Lamport Clock Simulation!")
    process_count = int(input("Enter the number of processes: "))
    system = DistributedSystem(process_count)

    while True:
        print("\nChoose an action:")
        print("1. Generate a local event")
        print("2. Send a message")
        print("3. Receive a message")
        print("4. Display all clocks")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            process_id = input(f"Enter the process ID (P0 to P{process_count - 1}): ")
            if process_id in system.processes:
                system.local_event(process_id)
            else:
                print("Invalid process ID.")

        elif choice == "2":
            sender_id = input(f"Enter the sender process ID (P0 to P{process_count - 1}): ")
            receiver_id = input(f"Enter the receiver process ID (P0 to P{process_count - 1}): ")
            if sender_id in system.processes and receiver_id in system.processes:
                system.send_message(sender_id, receiver_id)
            else:
                print("Invalid process ID(s).")

        elif choice == "3":
            receiver_id = input(f"Enter the receiver process ID (P0 to P{process_count - 1}): ")
            if receiver_id in system.processes:
                system.receive_message(receiver_id)
            else:
                print("Invalid process ID.")

        elif choice == "4":
            system.display_clocks()

        elif choice == "5":
            print("Exiting simulation.")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()